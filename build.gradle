import net.fabricmc.loom.task.RemapJarTask
plugins {
    id 'fabric-loom' version '1.10-SNAPSHOT'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'net.kyori.blossom' version '2.1.0'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}
configurations {
    shadowImpl {
        canBeResolved = true
        canBeConsumed = false
        extendsFrom implementation
    }
}
loom {
    splitEnvironmentSourceSets()

    mods {
        "mobpvp" {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }
}

fabricApi {
    configureDataGeneration()

}

repositories {
    maven {
        name = "Create Maven"
        url = "https://maven.createmod.net/"
    }
    maven {
        name = "Fabricators of Create (Porting Lib)"
        url = "https://mvn.devos.one/snapshots/"
    }
    maven {
        name = "Modrinth Maven"
        url = "https://api.modrinth.com/maven"
    }
    maven {
        name = "Curse Maven"
        url = "https://cursemaven.com"
    }
    maven { url = "https://jitpack.io" }
    mavenCentral()
    maven { url "https://maven.shedaniel.me"}
    maven { url "https://maven.wispforest.io" }
    maven { url = "https://maven.createmod.net" }
    maven { url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/" }// wispforest maven
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    // Versiyonlar
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // DiÄŸer modlar
    modImplementation name: 'MobLiB-1.3-build.3'
    modImplementation "io.wispforest:owo-lib:${project.owo_version}"
    include "io.wispforest:owo-lib:${project.owo_version}"

    modImplementation "curse.maven:cloth-config-348521:5729125"
    modApi("me.shedaniel.cloth:basic-math:+")
    modCompileOnly "curse.maven:modmenu-308702:5810603"

}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

task generateTinyMappings(type: Jar) {
    group = "build"
    description = "Generate the mapping .jar file for mod developers."

    archiveClassifier.set("mappings")
    from {
        def mappings = file("build/mappings")
        if (mappings.exists()) {
            return mappings
        } else {
            throw new GradleException("Mappings folder not found. Run a build first.")
        }
    }
}


java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = project.archives_base_name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
